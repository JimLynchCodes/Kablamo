{:rename-macros {}, :renames {}, :use-macros {console mranderson047.re-frame.v0v10v2.re-frame.loggers}, :excludes #{}, :name mranderson047.re-frame.v0v10v2.re-frame.utils, :imports nil, :requires {mranderson047.re-frame.v0v10v2.re-frame.loggers mranderson047.re-frame.v0v10v2.re-frame.loggers}, :cljs.spec/speced-vars [], :uses {console mranderson047.re-frame.v0v10v2.re-frame.loggers}, :defs {dissoc-in {:protocol-inline nil, :meta {:file "/Users/jameslynch/Git-Projects/Kablamo/kablamo/resources/public/js/compiled/out/mranderson047/re_frame/v0v10v2/re_frame/utils.cljc", :line 5, :column 7, :end-line 5, :end-column 16, :arglists (quote ([m [k & ks :as keys]])), :doc "Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\n  The key thing is that 'm' remains identical? to istelf if the path was never present"}, :name mranderson047.re-frame.v0v10v2.re-frame.utils/dissoc-in, :variadic false, :file "resources/public/js/compiled/out/mranderson047/re_frame/v0v10v2/re_frame/utils.cljc", :end-column 16, :method-params ([m p__41144]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m [k & ks :as keys]])), :doc "Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\n  The key thing is that 'm' remains identical? to istelf if the path was never present"}, first-in-vector {:protocol-inline nil, :meta {:file "/Users/jameslynch/Git-Projects/Kablamo/kablamo/resources/public/js/compiled/out/mranderson047/re_frame/v0v10v2/re_frame/utils.cljc", :line 20, :column 7, :end-line 20, :end-column 22, :arglists (quote ([v]))}, :name mranderson047.re-frame.v0v10v2.re-frame.utils/first-in-vector, :variadic false, :file "resources/public/js/compiled/out/mranderson047/re_frame/v0v10v2/re_frame/utils.cljc", :end-column 22, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:error}, :order [:error]}, :doc nil}