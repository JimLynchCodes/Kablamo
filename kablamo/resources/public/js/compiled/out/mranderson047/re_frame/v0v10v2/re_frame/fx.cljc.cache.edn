{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {console mranderson047.re-frame.v0v10v2.re-frame.loggers, set-timeout! mranderson047.re-frame.v0v10v2.re-frame.interop}, :excludes #{}, :name mranderson047.re-frame.v0v10v2.re-frame.fx, :imports nil, :requires {router mranderson047.re-frame.v0v10v2.re-frame.router, mranderson047.re-frame.v0v10v2.re-frame.router mranderson047.re-frame.v0v10v2.re-frame.router, mranderson047.re-frame.v0v10v2.re-frame.db mranderson047.re-frame.v0v10v2.re-frame.db, mranderson047.re-frame.v0v10v2.re-frame.interceptor mranderson047.re-frame.v0v10v2.re-frame.interceptor, mranderson047.re-frame.v0v10v2.re-frame.interop mranderson047.re-frame.v0v10v2.re-frame.interop, events mranderson047.re-frame.v0v10v2.re-frame.events, mranderson047.re-frame.v0v10v2.re-frame.events mranderson047.re-frame.v0v10v2.re-frame.events, mranderson047.re-frame.v0v10v2.re-frame.registrar mranderson047.re-frame.v0v10v2.re-frame.registrar, mranderson047.re-frame.v0v10v2.re-frame.loggers mranderson047.re-frame.v0v10v2.re-frame.loggers}, :cljs.spec/speced-vars [], :uses {console mranderson047.re-frame.v0v10v2.re-frame.loggers, app-db mranderson047.re-frame.v0v10v2.re-frame.db, ->interceptor mranderson047.re-frame.v0v10v2.re-frame.interceptor, set-timeout! mranderson047.re-frame.v0v10v2.re-frame.interop, get-handler mranderson047.re-frame.v0v10v2.re-frame.registrar, clear-handlers mranderson047.re-frame.v0v10v2.re-frame.registrar, register-handler mranderson047.re-frame.v0v10v2.re-frame.registrar}, :defs {kind {:name mranderson047.re-frame.v0v10v2.re-frame.fx/kind, :file "resources/public/js/compiled/out/mranderson047/re_frame/v0v10v2/re_frame/fx.cljc", :line 14, :column 1, :end-line 14, :end-column 10, :meta {:file "/Users/jameslynch/Git-Projects/Kablamo/kablamo/resources/public/js/compiled/out/mranderson047/re_frame/v0v10v2/re_frame/fx.cljc", :line 14, :column 6, :end-line 14, :end-column 10}, :tag cljs.core/Keyword}, reg-fx {:protocol-inline nil, :meta {:file "/Users/jameslynch/Git-Projects/Kablamo/kablamo/resources/public/js/compiled/out/mranderson047/re_frame/v0v10v2/re_frame/fx.cljc", :line 17, :column 7, :end-line 17, :end-column 13, :arglists (quote ([id handler])), :doc "Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."}, :name mranderson047.re-frame.v0v10v2.re-frame.fx/reg-fx, :variadic false, :file "resources/public/js/compiled/out/mranderson047/re_frame/v0v10v2/re_frame/fx.cljc", :end-column 13, :method-params ([id handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id handler])), :doc "Register the given effect `handler` for the given `id`.\n\n  `id` is keyword, often namespaced.\n  `handler` is a side-effecting function which takes a single argument and whose return\n  value is ignored.\n\n  Example Use\n  -----------\n\n  First, registration ... associate `:effect2` with a handler.\n\n  (reg-fx\n     :effect2\n     (fn [value]\n        ... do something side-effect-y))\n\n  Then, later, if an event handler were to return this effects map ...\n\n  {...\n   :effect2  [1 2]}\n\n   ... then the `handler` `fn` we registered previously, using `reg-fx`, will be\n   called with an argument of `[1 2]`."}, do-fx {:name mranderson047.re-frame.v0v10v2.re-frame.fx/do-fx, :file "resources/public/js/compiled/out/mranderson047/re_frame/v0v10v2/re_frame/fx.cljc", :line 46, :column 1, :end-line 46, :end-column 11, :meta {:file "/Users/jameslynch/Git-Projects/Kablamo/kablamo/resources/public/js/compiled/out/mranderson047/re_frame/v0v10v2/re_frame/fx.cljc", :line 46, :column 6, :end-line 46, :end-column 11}, :doc "An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \"set flag\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed.", :tag any}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:db :do-fx :dispatch-n :deregister-event-handler :dispatch :after :id :effects :error :ms :fx :dispatch-later}, :order [:fx :id :do-fx :after :effects :error :dispatch-later :ms :dispatch :dispatch-n :deregister-event-handler :db]}, :doc nil}