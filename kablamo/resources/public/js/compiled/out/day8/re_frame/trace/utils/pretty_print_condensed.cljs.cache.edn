{:rename-macros {}, :renames {}, :externs {Error {}, Math {floor {}}}, :use-macros {}, :excludes #{}, :name day8.re-frame.trace.utils.pretty-print-condensed, :imports nil, :requires {str clojure.string, clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses nil, :defs {truncate-string {:protocol-inline nil, :meta {:file "/Users/jameslynch/Git-Projects/Kablamo/kablamo/resources/public/js/compiled/out/day8/re_frame/trace/utils/pretty_print_condensed.cljs", :line 7, :column 15, :end-line 7, :end-column 30, :tag string, :arglists (quote ([n string] [n cut-from string])), :doc "Truncate a string to length `n`.\n\n  Removal occurs at `cut-from`, which may be :start, :end, or :middle.\n\n  Truncation is indicated by `…` at start/end, or `...` at middle, for readability. ", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n string] [n cut-from string]), :arglists ([n string] [n cut-from string]), :arglists-meta (nil nil)}}, :name day8.re-frame.trace.utils.pretty-print-condensed/truncate-string, :variadic false, :file "resources/public/js/compiled/out/day8/re_frame/trace/utils/pretty_print_condensed.cljs", :end-column 30, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n string] [n cut-from string]), :arglists ([n string] [n cut-from string]), :arglists-meta (nil nil)}, :method-params ([n string] [n cut-from string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :ret-tag string, :end-line 7, :max-fixed-arity 3, :tag string, :fn-var true, :arglists ([n string] [n cut-from string]), :doc "Truncate a string to length `n`.\n\n  Removal occurs at `cut-from`, which may be :start, :end, or :middle.\n\n  Truncation is indicated by `…` at start/end, or `...` at middle, for readability. "}, truncate-segments {:protocol-inline nil, :meta {:file "/Users/jameslynch/Git-Projects/Kablamo/kablamo/resources/public/js/compiled/out/day8/re_frame/trace/utils/pretty_print_condensed.cljs", :line 53, :column 15, :end-line 53, :end-column 32, :tag string, :arglists (quote ([s limit] [s limit match trunc-prefix])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([s limit] [s limit match trunc-prefix]), :arglists ([s limit] [s limit match trunc-prefix]), :arglists-meta (nil nil)}}, :name day8.re-frame.trace.utils.pretty-print-condensed/truncate-segments, :variadic false, :file "resources/public/js/compiled/out/day8/re_frame/trace/utils/pretty_print_condensed.cljs", :end-column 32, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([s limit] [s limit match trunc-prefix]), :arglists ([s limit] [s limit match trunc-prefix]), :arglists-meta (nil nil)}, :method-params ([s limit] [s limit match trunc-prefix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :ret-tag string, :end-line 53, :max-fixed-arity 4, :tag string, :fn-var true, :arglists ([s limit] [s limit match trunc-prefix])}, truncate-named {:protocol-inline nil, :meta {:file "/Users/jameslynch/Git-Projects/Kablamo/kablamo/resources/public/js/compiled/out/day8/re_frame/trace/utils/pretty_print_condensed.cljs", :line 83, :column 15, :end-line 83, :end-column 29, :tag string, :arglists (quote ([n named])), :doc "Truncates `named`, which must satisfy INamed protocol, to within `n`\n   characters, cutting from beginning. Adds a `…` prefix to indicate where\n   cutting has occurred."}, :name day8.re-frame.trace.utils.pretty-print-condensed/truncate-named, :variadic false, :file "resources/public/js/compiled/out/day8/re_frame/trace/utils/pretty_print_condensed.cljs", :end-column 29, :method-params ([n named]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :ret-tag string, :end-line 83, :max-fixed-arity 2, :tag string, :fn-var true, :arglists (quote ([n named])), :doc "Truncates `named`, which must satisfy INamed protocol, to within `n`\n   characters, cutting from beginning. Adds a `…` prefix to indicate where\n   cutting has occurred."}, truncate {:protocol-inline nil, :meta {:file "/Users/jameslynch/Git-Projects/Kablamo/kablamo/resources/public/js/compiled/out/day8/re_frame/trace/utils/pretty_print_condensed.cljs", :line 147, :column 15, :end-line 147, :end-column 23, :tag string, :arglists (quote ([n location param]))}, :name day8.re-frame.trace.utils.pretty-print-condensed/truncate, :variadic false, :file "resources/public/js/compiled/out/day8/re_frame/trace/utils/pretty_print_condensed.cljs", :end-column 23, :method-params ([n location param]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :ret-tag string, :end-line 147, :max-fixed-arity 3, :tag string, :fn-var true, :arglists (quote ([n location param]))}, str->namespaced-sym {:protocol-inline nil, :meta {:file "/Users/jameslynch/Git-Projects/Kablamo/kablamo/resources/public/js/compiled/out/day8/re_frame/trace/utils/pretty_print_condensed.cljs", :line 152, :column 7, :end-line 152, :end-column 26, :arglists (quote ([s]))}, :name day8.re-frame.trace.utils.pretty-print-condensed/str->namespaced-sym, :variadic false, :file "resources/public/js/compiled/out/day8/re_frame/trace/utils/pretty_print_condensed.cljs", :end-column 26, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, edges {:protocol-inline nil, :meta {:file "/Users/jameslynch/Git-Projects/Kablamo/kablamo/resources/public/js/compiled/out/day8/re_frame/trace/utils/pretty_print_condensed.cljs", :line 160, :column 7, :end-line 160, :end-column 12, :arglists (quote ([coll])), :doc "Return left and right edges of a collection (eg. brackets plus prefixes), defaults to [< >]."}, :name day8.re-frame.trace.utils.pretty-print-condensed/edges, :variadic false, :file "resources/public/js/compiled/out/day8/re_frame/trace/utils/pretty_print_condensed.cljs", :end-column 12, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Return left and right edges of a collection (eg. brackets plus prefixes), defaults to [< >]."}, with-edges {:protocol-inline nil, :meta {:file "/Users/jameslynch/Git-Projects/Kablamo/kablamo/resources/public/js/compiled/out/day8/re_frame/trace/utils/pretty_print_condensed.cljs", :line 170, :column 7, :end-line 170, :end-column 17, :arglists (quote ([coll value])), :doc "Wrap `value` with edges of `coll`"}, :name day8.re-frame.trace.utils.pretty-print-condensed/with-edges, :variadic false, :file "resources/public/js/compiled/out/day8/re_frame/trace/utils/pretty_print_condensed.cljs", :end-column 17, :method-params ([coll value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll value])), :doc "Wrap `value` with edges of `coll`"}, pretty-condensed {:protocol-inline nil, :meta {:file "/Users/jameslynch/Git-Projects/Kablamo/kablamo/resources/public/js/compiled/out/day8/re_frame/trace/utils/pretty_print_condensed.cljs", :line 176, :column 7, :end-line 176, :end-column 23, :arglists (quote ([form] [depth enter-pred max-depth form])), :doc "Render form in abbreviated form, showing content only for keywords/strings/symbols and entering collections to a depth of 1.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form] [depth enter-pred max-depth form]), :arglists ([form] [depth enter-pred max-depth form]), :arglists-meta (nil nil)}}, :name day8.re-frame.trace.utils.pretty-print-condensed/pretty-condensed, :variadic false, :file "resources/public/js/compiled/out/day8/re_frame/trace/utils/pretty_print_condensed.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form] [depth enter-pred max-depth form]), :arglists ([form] [depth enter-pred max-depth form]), :arglists-meta (nil nil)}, :method-params ([form] [depth enter-pred max-depth form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 4, :fn-var true, :arglists ([form] [depth enter-pred max-depth form]), :doc "Render form in abbreviated form, showing content only for keywords/strings/symbols and entering collections to a depth of 1."}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:else :start :middle :end :city/saskatoon}, :order [:end :start :city/saskatoon :else :middle]}, :doc "Utilities for pretty-printing abbreviated Clojure forms"}